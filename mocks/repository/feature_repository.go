// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/feature/repository/port/feature_repository.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
        context "context"
        reflect "reflect"

        model "github.com/cambiar_api/internal/core/feature/model"
        entity "github.com/cambiar_api/internal/entity"
        gomock "github.com/golang/mock/gomock"
)

// MockIFeatureRepository is a mock of IFeatureRepository interface.
type MockIFeatureRepository struct {
        ctrl     *gomock.Controller
        recorder *MockIFeatureRepositoryMockRecorder
}

// MockIFeatureRepositoryMockRecorder is the mock recorder for MockIFeatureRepository.
type MockIFeatureRepositoryMockRecorder struct {
        mock *MockIFeatureRepository
}

// NewMockIFeatureRepository creates a new mock instance.
func NewMockIFeatureRepository(ctrl *gomock.Controller) *MockIFeatureRepository {
        mock := &MockIFeatureRepository{ctrl: ctrl}
        mock.recorder = &MockIFeatureRepositoryMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFeatureRepository) EXPECT() *MockIFeatureRepositoryMockRecorder {
        return m.recorder
}

// GetAllWithQuery mocks base method.
func (m *MockIFeatureRepository) GetAllWithQuery(ctx context.Context, spec model.GetAllWithQuerySpec) []entity.Feature {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetAllWithQuery", ctx, spec)
        ret0, _ := ret[0].([]entity.Feature)
        return ret0
}

// GetAllWithQuery indicates an expected call of GetAllWithQuery.
func (mr *MockIFeatureRepositoryMockRecorder) GetAllWithQuery(ctx, spec interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithQuery", reflect.TypeOf((*MockIFeatureRepository)(nil).GetAllWithQuery), ctx, spec)
}